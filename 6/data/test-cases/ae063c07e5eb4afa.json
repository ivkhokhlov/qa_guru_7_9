{"uid":"ae063c07e5eb4afa","name":"test_if_issue_is_visible","fullName":"test_steps_decorated#test_if_issue_is_visible","historyId":"11c9cc9624bf1828a325bfa5762f67a7","time":{"start":1692711004473,"stop":1692711005109,"duration":636},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1","statusTrace":"browser_settings = None\n\n    @allure.tag(\"web\")\n    @allure.severity(Severity.CRITICAL)\n    @allure.label(\"owner\", \"IvanKhokhlov\")\n    @allure.feature(\"Github Issues\")\n    @allure.story(\"Пользователь видит созданные Issues - decorated\")\n    @allure.link(\"https://github.com\", name=\"Testing\")\n    def test_if_issue_is_visible(browser_settings):\n>       open_main_page()\n\ntest_steps_decorated.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_steps_decorated.py:9: in open_main_page\n    browser.open('https://github.com/')\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/entity.py:1155: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:301: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:216: in get\n    driver = config.driver\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:343: in __get__\n    driver = config.build_driver_strategy(config)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:171: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:99: in install_and_build_firefox\n    return Firefox(\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/firefox/webdriver.py:67: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:206: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:290: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff9faacb010>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Process unexpectedly closed with status 1\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser_settings","time":{"start":1692711004472,"stop":1692711004472,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1","statusTrace":"browser_settings = None\n\n    @allure.tag(\"web\")\n    @allure.severity(Severity.CRITICAL)\n    @allure.label(\"owner\", \"IvanKhokhlov\")\n    @allure.feature(\"Github Issues\")\n    @allure.story(\"Пользователь видит созданные Issues - decorated\")\n    @allure.link(\"https://github.com\", name=\"Testing\")\n    def test_if_issue_is_visible(browser_settings):\n>       open_main_page()\n\ntest_steps_decorated.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_steps_decorated.py:9: in open_main_page\n    browser.open('https://github.com/')\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/entity.py:1155: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:301: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:216: in get\n    driver = config.driver\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:343: in __get__\n    driver = config.build_driver_strategy(config)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:171: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py:99: in install_and_build_firefox\n    return Firefox(\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/firefox/webdriver.py:67: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:206: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:290: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff9faacb010>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Process unexpectedly closed with status 1\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[{"name":"Открыть главную страницу GitHub","time":{"start":1692711004473,"stop":1692711005108,"duration":635},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/qa_guru_7_9/qa_guru_7_9/test_steps_decorated.py\", line 9, in open_main_page\n    browser.open('https://github.com/')\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/entity.py\", line 1155, in open\n    self.config._executor.get_url(relative_or_absolute_url)\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py\", line 301, in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py\", line 216, in get\n    driver = config.driver\n             ^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py\", line 343, in __get__\n    driver = config.build_driver_strategy(config)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py\", line 171, in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n           ^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selene/core/configuration.py\", line 99, in install_and_build_firefox\n    return Firefox(\n           ^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/firefox/webdriver.py\", line 67, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 206, in __init__\n    self.start_session(capabilities)\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 290, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 345, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"owner","value":"IvanKhokhlov"},{"name":"tag","value":"web"},{"name":"feature","value":"Github Issues"},{"name":"story","value":"Пользователь видит созданные Issues - decorated"},{"name":"severity","value":"critical"},{"name":"suite","value":"test_steps_decorated"},{"name":"host","value":"fv-az450-443"},{"name":"thread","value":"2191-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_steps_decorated"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Testing","url":"https://github.com","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"critical","owner":"IvanKhokhlov","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"344c66a7edca5b74","reportUrl":"https://ivkhokhlov.github.io/qa_guru_7_9/5//#testresult/344c66a7edca5b74","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1","time":{"start":1692710818362,"stop":1692710819012,"duration":650}}]},"tags":["web"]},"source":"ae063c07e5eb4afa.json","parameterValues":[]}